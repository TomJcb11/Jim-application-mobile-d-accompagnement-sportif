// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              String           @id @unique @default(cuid())
  userBirthDate       DateTime         @default(now())
  userInscriptionDate DateTime         @default(now())
  userSex             Sex              @default(O)
  bodyHeight          Float            @default(150.0)
  healthIssue         UserHealthIssue[]
  ownedWeekPlans      WeekPlan[]       @relation("OwnerRelation")
  userWeekPlans       WeekPlan[]       @relation("UserRelation")
  userBody            UserBody[]
  userLvl             Levels[]
  userLevel           Int              @default(1)
  userXp              Int              @default(0)
  name                String           
  email               String           @unique
  password            String           @default("no password provided by apollo graphQL")
  phoneNumber         String           @unique @default("no phone number provided by apollo graphQL")     
  
}

model UserHealthIssue {
  id          String @id @unique @default(cuid())
  user        User   @relation(fields: [userId], references: [userId])
  userId      String
  healthIssue Health
}

model Levels {
  levelId          String          @id @unique @default(cuid())
  levelDescription String          @unique
  xpRequired       Int
  exercises        Exercises[]
  user             User[]
  repsMultiplier   Int             @default(1)
  chargeMultiplier Int             @default(1)
  instructions     Instructions[]
}

model Muscles {
  muscleId          String          @id @unique @default(cuid())
  muscleDescription String          @unique
  exerciseXMuscles  ExerciseXMuscles[]
}

model Equipements {
  equipementId          String      @id @unique @default(cuid())
  equipementDescription String      @unique
  equipementPhotoUrl    String?     @unique
  exercises             Exercises[]
}

model Exercises {
  exerciseId          String          @id @unique @default(cuid())
  exerciceName        String
  exerciseDescription String
  exerciseIntensities Intensities     @default(medium)
  levelId             String
  exerciseLevel       Levels          @relation(fields: [levelId], references: [levelId])
  equipementId        String
  exerciseEquipement  Equipements     @relation(fields: [equipementId], references: [equipementId])
  exerciseXMedias     ExerciseXMedia[]
  exerciseXMuscles    ExerciseXMuscles[]
  xpGain              Int             @default(100)
  reps                String
  sets                String
  rest                String
  charge              String
  kind                Kind
}

model Instructions {
  instructionId         String          @id @unique @default(cuid())
  levelId               String
  level                 Levels          @relation(fields: [levelId], references: [levelId])
  lowerValue            Int
  upperValue            Int
  multiplier            Float
  instructionDescription String
}

model ExerciseXMedia {
  id           String    @id @unique @default(cuid())
  exerciseId   String
  exercise     Exercises @relation(fields: [exerciseId], references: [exerciseId])
  mediaUrl     String
}

model ExerciseXMuscles {
  id           String    @id @unique @default(cuid())
  exerciseId   String
  exercise     Exercises @relation(fields: [exerciseId], references: [exerciseId])
  muscleId     String
  muscle       Muscles   @relation(fields: [muscleId], references: [muscleId])
}

model WeekPlan {
  id                          String          @id @unique @default(cuid())
  programOwnerId              String
  programOwner                User            @relation("OwnerRelation", fields: [programOwnerId], references: [userId])
  programUserId               String?         @unique
  programUser                 User?           @relation("UserRelation", fields: [programUserId], references: [userId])
  infrastructureAvailability Infrastructure?
  programData                 Json
  dataProviding               Json
  userScaling                 Json            @default("{}")
  workoutSessions             WorkoutSession[]
}

model WorkoutSession {
  id            String    @id @unique @default(cuid())
  weekPlanId    String
  weekPlan      WeekPlan  @relation(fields: [weekPlanId], references: [id])
  sessionData   Json
  healthIssues  Json  
  currentDate   DateTime
}

model UserBody {
  id             String   @id @unique @default(cuid())
  userId         String
  user           User    @relation(fields: [userId], references: [userId])
  bodyWeight     Float
  measuringDate  DateTime @default(now())
}

enum Kind {
  strengh
  cardio
  flexibility
}
enum Sex {
  M
  F
  O
}

enum Intensities {
  low
  medium
  high
  super
}

enum Infrastructure {
  home
  gym
  outdoor
}

enum Health {
  none
  heart
  back
  rightArm
  leftArm
  rightLeg
  leftLeg
  muscleSoreness
}
