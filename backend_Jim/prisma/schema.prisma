datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              String           @id @unique @default(cuid())
  userBirthDate       DateTime         @default(now())
  userInscriptionDate DateTime         @default(now())
  userSex             Sex              @default(O)
  bodyHeight          String
  healthIssue         UserHealthIssue[]
  ownedWeekPlans      WeekPlan[]       @relation("OwnerRelation")
  userWeekPlans       WeekPlan[]       @relation("UserRelation")
  userBody            UserBody[]
}

model UserHealthIssue {
  id          String @id @unique @default(cuid())
  user        User   @relation(fields: [userId], references: [userId])
  userId      String
  healthIssue Health
}

model Levels {
  levelId          String     @id @unique @default(cuid())
  levelDescription String     @unique
  exercises        Exercises[]
}

model Muscles {
  muscleId          String          @id @unique @default(cuid())
  muscleDescription String          @unique
  exerciseXMuscles  ExerciseXMuscles[]
}

model Equipements {
  equipementId          String  @id @unique @default(cuid())
  equipementDescription String  @unique
  equipementPhotoUrl    String? @unique
}

model Exercises {
  exerciseId          String          @id @unique @default(cuid())
  exerciseInstruction String
  exerciseIntensities Intensities     @default(medium)
  levelId             String
  exerciseLevel       Levels          @relation(fields: [levelId], references: [levelId])
  exerciseXMedias     ExerciseXMedia[]
  exerciseXMuscles    ExerciseXMuscles[]
}

model ExerciseXMedia {
  id           String    @id @unique @default(cuid())
  exerciseId   String
  exercise     Exercises @relation(fields: [exerciseId], references: [exerciseId])
  mediaUrl     String
}

model ExerciseXMuscles {
  id           String    @id @unique @default(cuid())
  exerciseId   String
  exercise     Exercises @relation(fields: [exerciseId], references: [exerciseId])
  muscleId     String
  muscle       Muscles   @relation(fields: [muscleId], references: [muscleId])
}

model WeekPlan {
  id                          String          @id @unique @default(cuid())
  programOwnerId              String
  programOwner                User            @relation("OwnerRelation", fields: [programOwnerId], references: [userId])
  programUserId               String?
  programUser                 User?           @relation("UserRelation", fields: [programUserId], references: [userId])
  infrastructureAvailability Infrastructure?
  programData                 Json
  workoutSessions             WorkoutSession[]
}

model WorkoutSession {
  id            String    @id @unique @default(cuid())
  weekPlanId    String
  weekPlan      WeekPlan  @relation(fields: [weekPlanId], references: [id])
  sessionData   Json
  healthIssues  Health  
  currentDate   DateTime
}

model UserBody {
  id             String   @id @unique @default(cuid())
  userId         String
  user           User    @relation(fields: [userId], references: [userId])
  bodyWeight     Float
  measuringDate  DateTime @default(now())
}

enum Sex {
  M
  F
  O
}

enum Intensities {
  low
  medium
  high
  super
}

enum Infrastructure {
  home
  gym
  outdoor
}

enum Health {
  none
  heart
  back
  rightArm
  leftArm
  rightLeg
  leftLeg
  muscleSoreness
}

generator client {
  provider = "prisma-client-js"
}