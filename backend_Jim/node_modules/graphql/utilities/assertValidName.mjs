<<<<<<< HEAD
import devAssert from "../jsutils/devAssert.mjs";
import { GraphQLError } from "../error/GraphQLError.mjs";
var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * Upholds the spec rules about naming.
 */

export function assertValidName(name) {
  var error = isValidNameError(name);
=======
import { devAssert } from '../jsutils/devAssert.mjs';
import { GraphQLError } from '../error/GraphQLError.mjs';
import { assertName } from '../type/assertName.mjs';
/* c8 ignore start */

/**
 * Upholds the spec rules about naming.
 * @deprecated Please use `assertName` instead. Will be removed in v17
 */

export function assertValidName(name) {
  const error = isValidNameError(name);
>>>>>>> origin/main

  if (error) {
    throw error;
  }

  return name;
}
/**
 * Returns an Error if a name is invalid.
<<<<<<< HEAD
 */

export function isValidNameError(name) {
  typeof name === 'string' || devAssert(0, 'Expected name to be a string.');

  if (name.length > 1 && name[0] === '_' && name[1] === '_') {
    return new GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
  }

  if (!NAME_RX.test(name)) {
    return new GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
  }
}
=======
 * @deprecated Please use `assertName` instead. Will be removed in v17
 */

export function isValidNameError(name) {
  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');

  if (name.startsWith('__')) {
    return new GraphQLError(
      `Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`,
    );
  }

  try {
    assertName(name);
  } catch (error) {
    return error;
  }
}
/* c8 ignore stop */
>>>>>>> origin/main
